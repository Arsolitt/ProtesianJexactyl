#version: "3.8"

networks:
  panel:
  traefik_net:
    external: true

services:
  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
      args:
        UID: ${UID}
        GID: ${GID}
    image: ${IMAGE_PREFIX}_nginx
    container_name: ${CONTAINER_PREFIX}_nginx
    restart: unless-stopped
    volumes:
      - "./panel:/var/www/panel"
      - "./docker/nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "./docker/nginx/configs/default.conf:/etc/nginx/conf.d/default.conf"
    networks:
      - panel
      - traefik_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.protesian.entrypoints=https"
      - "traefik.http.routers.protesian.tls.certresolver=letsencrypt"
      - "traefik.http.routers.protesian.rule=Host(`protesian.arsolitt.online`)"
      - "traefik.http.services.protesian.loadbalancer.server.port=80"

  database:
    image: mariadb:11.2.2-jammy
    container_name: ${CONTAINER_PREFIX}_database
    restart: unless-stopped
    stdin_open: true
    tty: true
    environment:
      MARIADB_DATABASE: ${DB_DATABASE}
      MARIADB_USER: ${DB_USERNAME}
      MARIADB_PASSWORD: ${DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - "./docker/database/data:/var/lib/mysql"
      - "./docker/database/init:/docker-entrypoint-initdb.d"
    networks:
      - panel
    ports:
      - "${DB_PORT}:3306"

  redis:
    image: redis:7.2.3-alpine3.19
    container_name: ${CONTAINER_PREFIX}_redis
    restart: unless-stopped
    stdin_open: true
    tty: true
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    networks:
      - panel
    volumes:
      - "./docker/redis/data:/data"

  app:
    build:
      context: .
      dockerfile: docker/php.Dockerfile
      args:
        UID: ${UID}
        GID: ${GID}
    stdin_open: true
    tty: true
    image: ${IMAGE_PREFIX}_php
    container_name: ${CONTAINER_PREFIX}_app
    depends_on:
      - redis
      - database
      - nginx
    volumes:
      - "./panel:/var/www/panel"
    networks:
      - panel

  scheduler:
    build:
      context: .
      dockerfile: docker/php.Dockerfile
      args:
        UID: ${UID}
        GID: ${GID}
    stdin_open: true
    tty: true
    restart: unless-stopped
    image: ${IMAGE_PREFIX}_php
    container_name: ${CONTAINER_PREFIX}_scheduler
    entrypoint: ["/home/tools/role.sh"]
    depends_on:
      - redis
      - database
      - app
    environment:
      CONTAINER_ROLE: scheduler
    volumes:
      - "./panel:/home/app"
    networks:
      - panel

  queue:
    build:
      context: .
      dockerfile: docker/php.Dockerfile
      args:
        UID: ${UID}
        GID: ${GID}
    stdin_open: true
    tty: true
    restart: unless-stopped
    image: ${IMAGE_PREFIX}_php
    container_name: ${CONTAINER_PREFIX}_queue
    entrypoint: ["/home/tools/role.sh"]
    depends_on:
      - redis
      - database
      - app
    environment:
      CONTAINER_ROLE: queue
    volumes:
      - "./panel:/home/app"
    networks:
      - panel

  composer:
    build:
      context: .
      dockerfile: docker/php.Dockerfile
      args:
        UID: ${UID}
        GID: ${GID}
    stdin_open: true
    tty: true
    image: ${IMAGE_PREFIX}_php
    entrypoint: ["/usr/bin/composer"]
    volumes:
      - "./panel:/home/app"
    networks:
      - panel

  artisan:
    build:
      context: .
      dockerfile: docker/php.Dockerfile
      args:
        UID: ${UID}
        GID: ${GID}
    stdin_open: true
    tty: true
    image: ${IMAGE_PREFIX}_php
    entrypoint: ["php", "/home/app/artisan"]
    volumes:
      - "./panel:/home/app"
    networks:
      - panel

  yarn:
    build:
      context: .
      dockerfile: docker/node.Dockerfile
      args:
        UID: ${UID}
        GID: ${GID}
    image: ${IMAGE_PREFIX}_node
    stdin_open: true
    tty: true
    volumes:
      - "./panel:/home/app"
    networks:
      - panel
